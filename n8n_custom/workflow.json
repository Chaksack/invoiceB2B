{
  "name": "Invoice Processing",
  "nodes": [
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "invoiceId",
              "value": "={{ $node[\"Set - Prepare Initial Data\"].json.invoiceId }}"
            },
            {
              "name": "errorMessage",
              "value": "={{ $error.message || 'Unknown processing error' }}"
            },
            {
              "name": "errorDetails",
              "value": "={{ JSON.stringify($error) }}"
            }
          ]
        },
        "options": {}
      },
      "name": "Set - Error Details",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        740,
        580
      ],
      "id": "480b8dd9-fe86-4d77-95fd-335a0f645fef"
    },
    {
      "parameters": {
        "method": "PUT",
        "url": "=http://api:3000/api/v1/internal/invoices/{{ $json.invoiceId }}/processed-data",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-Internal-API-Key",
              "value": "your-strong-internal-api-key-for-n8n"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "jsonData",
              "value": "={{ $json.jsonData }}"
            }
          ]
        },
        "options": {}
      },
      "name": "HTTP - Update Go API (Success)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        1000,
        200
      ],
      "id": "e3b15dd2-cec7-4fcf-ba2f-1743f9785107"
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "invoiceId",
              "value": "={{ $node[\"Set - Prepare Initial Data\"].json.invoiceId }}"
            },
            {
              "name": "jsonData",
              "value": "={{ $json.jsonData || '{}' }}"
            },
            {
              "name": "extractedInvoiceNumber",
              "value": "={{ $json.extractedInvoiceNumber }}"
            },
            {
              "name": "extractedCurrency",
              "value": "={{ $json.extractedCurrency }}"
            },
            {
              "name": "extractedDueDate",
              "value": "={{ $json.invoiceDate }}"
            },
            {
              "name": "extractedDebtorName",
              "value": "={{ $json.extractedDebtorName }}"
            },
            {
              "name": "extractedIssuerName",
              "value": "={{ $json.extractedIssuerName }}"
            },
            {
              "name": "extractedIssuerBankAccount",
              "value": "={{ $json.extractedIssuerBankAccount }}"
            },
            {
              "name": "extractedIssuerBankName",
              "value": "={{ $json.extractedIssuerBankName }}"
            },
            {
              "name": "newStatus",
              "value": "pending_admin_review"
            }
          ],
          "number": [
            {
              "name": "extractedAmount",
              "value": "={{ $json.extractedAmount }}"
            }
          ],
          "boolean": []
        },
        "options": {}
      },
      "name": "Set - API Payload (Success)",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        800,
        200
      ],
      "id": "c731eadc-362d-42f6-8bb3-2432a23389ea"
    },
    {
      "parameters": {},
      "name": "Merge Success",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        600,
        200
      ],
      "id": "f6bbbc30-46d5-4ede-a427-13824e9dd1e0"
    },
    {
      "parameters": {
        "functionCode": "const text = $json.stdout;\nconst extractedData = {};\n\n// --- Your custom OCR text parsing logic here ---\n// This is highly dependent on invoice layout and OCR quality.\nlet match = text.match(/Invoice No[:\\s]+([A-Za-z0-9-]+)/i);\nif (match && match[1]) extractedData.extractedInvoiceNumber = match[1].trim();\n\n// ... more robust regex for other fields ...\n\nextractedData.jsonData = JSON.stringify(extractedData);\nreturn [{ json: extractedData }];"
      },
      "name": "Function - Extract OCR Data",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        400,
        400
      ],
      "id": "4c5db358-6eea-414e-98b8-6d533d6be8fa"
    },
    {
      "parameters": {
        "command": "=tesseract \"{{ $json.absoluteFilePath }}\" stdout -l eng --psm 6"
      },
      "name": "Execute Tesseract OCR",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        200,
        400
      ],
      "id": "a0ba816e-c135-4ae1-9ed6-d981ad61cf04"
    },
    {
      "parameters": {
        "filePath": "={{ $json.absoluteFilePath }}"
      },
      "name": "Read Image File",
      "type": "n8n-nodes-base.readBinaryFile",
      "typeVersion": 1,
      "position": [
        0,
        400
      ],
      "id": "ae18347c-22d9-44b6-9619-b1d1898f9622"
    },
    {
      "parameters": {
        "functionCode": "const items = [{ json: {} }];\nconst csvRow = $json[0]; // Assuming first row has the main invoice data\n\nif (csvRow) {\n  items[0].json.extractedInvoiceNumber = csvRow.InvoiceNumber;\n  items[0].json.extractedAmount = parseFloat(csvRow.Amount);\n  items[0].json.extractedCurrency = csvRow.Currency;\n  items[0].json.extractedDueDate = csvRow.DueDate; // Ensure YYYY-MM-DD\n  items[0].json.extractedDebtorName = csvRow.DebtorName;\n  items[0].json.extractedIssuerName = csvRow.IssuerName;\n  items[0].json.extractedIssuerBankAccount = csvRow.IssuerBankAccount;\n  items[0].json.extractedIssuerBankName = csvRow.IssuerBankName;\n}\n\nitems[0].json.jsonData = JSON.stringify(items[0].json);\nreturn items;"
      },
      "name": "Function - Map CSV Data",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        200,
        200
      ],
      "id": "0cc5b56c-b64d-4779-a3fb-c8b0ea66741b"
    },
    {
      "parameters": {
        "functionCode": "const text = $json.text || '';\nconst extractedData = {\n  lineItems: [],\n  accountDetails: {}\n};\n\nif (text) {\n  // Invoice number\n  let match = text.match(/Invoice No\\.?\\s*([A-Za-z0-9-]+)/i);\n  if (match && match[1]) extractedData.extractedInvoiceNumber = match[1].trim();\n\n  // Invoice date\n  match = text.match(/(\\d{1,2} [A-Za-z]+ \\d{4})/);\n  if (match && match[1]) extractedData.invoiceDate = match[1];\n\n  // Billed to\n  match = text.match(/Billed to:\\s*(.+?)\\n/);\n  if (match && match[1]) extractedData.billedTo = match[1].trim();\n\n  // Total amount\n  match = text.match(/Total\\s*\\$([\\d,]+\\.\\d{2})/i);\n  if (match && match[1]) {\n    try {\n      extractedData.extractedAmount = parseFloat(match[1].replace(/,/g, ''));\n    } catch (e) {\n      console.error('Error parsing amount:', e);\n    }\n  }\n\n  // Currency\n  if (text.includes('$')) {\n    extractedData.extractedCurrency = 'USD';\n  } else {\n    match = text.match(/\\b(USD|EUR|GBP|GHS)\\b/i);\n    if (match && match[1]) {\n      extractedData.extractedCurrency = match[1].toUpperCase();\n    }\n  }\n\n  // Account details\n  match = text.match(/Account Name:\\s*(.+?)\\n/i);\n  if (match && match[1]) extractedData.accountDetails.accountName = match[1].trim();\n\n  match = text.match(/Account No:\\s*([0-9-]+)/i);\n  if (match && match[1]) extractedData.accountDetails.accountNumber = match[1].trim();\n\n  match = text.match(/([A-Za-z ]+Bank)/);\n  if (match && match[1]) extractedData.accountDetails.bankName = match[1].trim();\n\n  // Line items\n  const lines = text.split('\\n');\n  const itemRegex = /^(.+?)\\s+(\\d+)\\s+\\$(\\d+(?:,\\d{3})*(?:\\.\\d{2})?)\\s+\\$(\\d+(?:,\\d{3})*(?:\\.\\d{2})?)$/;\n  let startCollecting = false;\n\n  for (let i = 0; i < lines.length; i++) {\n    if (lines[i].includes('Item') && lines[i].includes('Quantity')) {\n      startCollecting = true;\n      continue;\n    }\n    if (startCollecting) {\n      const itemMatch = lines[i].match(itemRegex);\n      if (itemMatch) {\n        extractedData.lineItems.push({\n          item: itemMatch[1].trim(),\n          quantity: parseInt(itemMatch[2]),\n          unitPrice: parseFloat(itemMatch[3].replace(/,/g, '')),\n          total: parseFloat(itemMatch[4].replace(/,/g, ''))\n        });\n      } else if (lines[i].startsWith('Subtotal')) {\n        break;\n      }\n    }\n  }\n}\n\nextractedData.jsonData = JSON.stringify(extractedData, null, 2);\nreturn [{ json: extractedData }];\n"
      },
      "name": "Function - Extract PDF Data",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        400,
        0
      ],
      "id": "cf167ca5-7da8-46d1-a1f4-2ce01a4d4cad"
    },
    {
      "parameters": {
        "filePath": "={{ $json.absoluteFilePath }}"
      },
      "name": "Read PDF File",
      "type": "n8n-nodes-base.readBinaryFile",
      "typeVersion": 1,
      "position": [
        0,
        0
      ],
      "id": "fe57d1b0-7380-4fef-a342-4487ebc80237"
    },
    {
      "parameters": {
        "dataType": "string",
        "value1": "={{ $json.fileExtension }}",
        "rules": {
          "rules": [
            {
              "value2": "pdf"
            },
            {
              "value2": "csv",
              "output": 1
            },
            {
              "operation": "regex",
              "value2": "jpeg|jpg|png",
              "output": 2
            }
          ]
        }
      },
      "name": "Switch - File Type",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 1,
      "position": [
        -200,
        200
      ],
      "id": "abb67946-f11f-4b44-a79a-0e6b18ef195b"
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "invoiceId",
              "value": "={{ $json.content.invoice_id }}"
            },
            {
              "name": "userId",
              "value": "={{ $json.content.user_id }}"
            },
            {
              "name": "relativeFilePath",
              "value": "={{ $json.content.file_path }}"
            },
            {
              "name": "originalFilename",
              "value": "={{ $json.content.original_filename }}"
            },
            {
              "name": "absoluteFilePath",
              "value": "={{ '/mnt/invoice_uploads/' + $json.content.file_path }}"
            },
            {
              "name": "fileExtension",
              "value": "={{ $json.content.original_filename.split('.').pop().toLowerCase() }}"
            },
            {
              "name": "companyName",
              "value": "={{ $json.content.company_name }}"
            },
            {
              "name": "uploadedAT",
              "value": "={{ $json.content.uploaded_at }}"
            },
            {
              "name": "userEmail",
              "value": "={{ $json.content.user_email }}"
            }
          ]
        },
        "options": {}
      },
      "name": "Set - Prepare Initial Data",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        -400,
        200
      ],
      "id": "4a352284-623d-481e-9ca0-2a92e07923bf"
    },
    {
      "parameters": {
        "queue": "invoice_processing_queue",
        "options": {
          "assertQueue": true,
          "acknowledge": "executionFinishesSuccessfully",
          "durable": true,
          "jsonParseBody": "={{ true }}"
        }
      },
      "name": "RabbitMQ Trigger",
      "type": "n8n-nodes-base.rabbitmqTrigger",
      "typeVersion": 1,
      "position": [
        -600,
        200
      ],
      "id": "25444f00-03dd-4edf-8548-fdb4e2528eac",
      "credentials": {
        "rabbitmq": {
          "id": "QrnXtBE9e8nl6KRj",
          "name": "LocalAppRabbitMQ"
        }
      }
    },
    {
      "parameters": {
        "operation": "pdf",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        200,
        0
      ],
      "id": "4176b8d9-bb3a-4e6d-b2d6-891fb77b901b",
      "name": "Extract from File"
    }
  ],
  "pinData": {},
  "connections": {
    "Set - Error Details": {
      "main": [
        []
      ]
    },
    "HTTP - Update Go API (Success)": {
      "main": [
        [
          {
            "node": "Set - Error Details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set - API Payload (Success)": {
      "main": [
        [
          {
            "node": "HTTP - Update Go API (Success)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Success": {
      "main": [
        [
          {
            "node": "Set - API Payload (Success)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function - Extract OCR Data": {
      "main": [
        [
          {
            "node": "Merge Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Tesseract OCR": {
      "main": [
        [
          {
            "node": "Function - Extract OCR Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read Image File": {
      "main": [
        [
          {
            "node": "Execute Tesseract OCR",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function - Map CSV Data": {
      "main": [
        [
          {
            "node": "Merge Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function - Extract PDF Data": {
      "main": [
        [
          {
            "node": "Merge Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read PDF File": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch - File Type": {
      "main": [
        [
          {
            "node": "Read PDF File",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Function - Map CSV Data",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Read Image File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set - Prepare Initial Data": {
      "main": [
        [
          {
            "node": "Switch - File Type",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "RabbitMQ Trigger": {
      "main": [
        [
          {
            "node": "Set - Prepare Initial Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "Function - Extract PDF Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1",
    "callerPolicy": "workflowsFromSameOwner"
  },
  "versionId": "d7c6dc5d-ad96-47ca-bbf2-7bc8ba6b634f",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "b2f4a68af9a00c3b1e8de80e090a4b1d068c3ac5e3dfbc626a0a9fbdc3dbf927"
  },
  "id": "Xm4pcA1VJPaKsWmt",
  "tags": []
}