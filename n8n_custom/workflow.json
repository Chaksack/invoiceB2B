{
  "name": "Invoice Processing",
  "nodes": [
    {
      "parameters": {
        "queue": "invoice_processing_queue",
        "options": {
          "assertQueue": true,
          "acknowledge": "executionFinishesSuccessfully",
          "durable": true,
          "jsonParseBody": "={{ true }}"
        }
      },
      "name": "RabbitMQ Trigger",
      "type": "n8n-nodes-base.rabbitmqTrigger",
      "typeVersion": 1,
      "position": [
        -600,
        200
      ],
      "id": "4ca604bb-d2eb-410c-8ff8-60601c475989",
      "credentials": {
        "rabbitmq": {
          "id": "QrnXtBE9e8nl6KRj",
          "name": "LocalAppRabbitMQ"
        }
      }
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "invoiceId",
              "value": "={{ $json.content.invoice_id }}"
            },
            {
              "name": "userId",
              "value": "={{ $json.content.user_id }}"
            },
            {
              "name": "relativeFilePath",
              "value": "={{ $json.content.file_path }}"
            },
            {
              "name": "originalFilename",
              "value": "={{ $json.content.original_filename }}"
            },
            {
              "name": "absoluteFilePath",
              "value": "={{ '/mnt/invoice_uploads/' + $json.content.file_path }}"
            },
            {
              "name": "fileExtension",
              "value": "={{ $json.content.original_filename.split('.').pop().toLowerCase() }}"
            },
            {
              "name": "companyName",
              "value": "={{ $json.content.company_name }}"
            },
            {
              "name": "uploadedAT",
              "value": "={{ $json.content.uploaded_at }}"
            },
            {
              "name": "userEmail",
              "value": "={{ $json.content.user_email }}"
            }
          ]
        },
        "options": {}
      },
      "name": "Set - Prepare Initial Data",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        -400,
        200
      ],
      "id": "31f83e26-c337-427b-8320-00b0bddf4207"
    },
    {
      "parameters": {
        "dataType": "string",
        "rules": {
          "rules": [
            {
              "value2": "pdf"
            },
            {
              "value2": "csv",
              "output": 1
            },
            {
              "operation": "notRegex",
              "value2": "jpeg|jpg|png",
              "output": 2
            }
          ]
        }
      },
      "name": "Switch - File Type",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 1,
      "position": [
        -200,
        200
      ],
      "id": "31c1aac6-d56f-437e-ac1d-d14db8d921b4"
    },
    {
      "parameters": {
        "filePath": "={{ $json.absoluteFilePath }}"
      },
      "name": "Read PDF File",
      "type": "n8n-nodes-base.readBinaryFile",
      "typeVersion": 1,
      "position": [
        0,
        0
      ],
      "id": "4c31b9b4-6ba6-45a6-b8aa-02a1ce629563"
    },
    {
      "parameters": {
        "command": "=pdftotext \"{{ $json.absoluteFilePath }}\" -"
      },
      "name": "Execute pdftotext",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        200,
        0
      ],
      "id": "7d87d0fe-6a5e-4803-a720-4171b8905554"
    },
    {
      "parameters": {
        "functionCode": "const text = $json.stdout;\nconst extractedData = {};\n\n// Example: Invoice Number\nlet match = text.match(/Invoice No[:\\s]+([A-Za-z0-9-]+)/i);\nif (match && match[1]) extractedData.extractedInvoiceNumber = match[1].trim();\n\n// Example: Amount\nmatch = text.match(/(?:Total Amount|Amount Due|Total)[:\\s$€£]*([\\d,]+\\.\\d{2})/i);\nif (match && match[1]) {\n  try {\n    extractedData.extractedAmount = parseFloat(match[1].replace(/,/g, ''));\n  } catch(e) { console.error('Error parsing amount from PDF:', e); }\n}\n\n// Example: Currency\nmatch = text.match(/\\b(USD|EUR|GBP|GHS)\\b/i);\nif (match && match[1]) extractedData.extractedCurrency = match[1].toUpperCase();\n\n// Example: Due Date (placeholder - needs robust parsing)\n// match = text.match(/Due Date[:\\s]+(\\d{1,2}[-\\/]\\d{1,2}[-\\/]\\d{2,4})/i);\n// if (match && match[1]) extractedData.extractedDueDate = 'YYYY-MM-DD'; // Format this\n\n// Example: Debtor Name\n// match = text.match(/(?:Bill To|Customer|Client)[:\\s\\n]+([^\\n]+)/i);\n// if (match && match[1]) extractedData.extractedDebtorName = match[1].trim();\n\n\nextractedData.jsonData = JSON.stringify(extractedData);\nreturn [{ json: extractedData }];"
      },
      "name": "Function - Extract PDF Data",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        400,
        0
      ],
      "id": "7bc0d250-998e-4061-b401-e76dc17f2c13"
    },
    {
      "parameters": {
        "functionCode": "const items = [{ json: {} }];\nconst csvRow = $json[0]; // Assuming first row has the main invoice data\n\nif (csvRow) {\n  items[0].json.extractedInvoiceNumber = csvRow.InvoiceNumber;\n  items[0].json.extractedAmount = parseFloat(csvRow.Amount);\n  items[0].json.extractedCurrency = csvRow.Currency;\n  items[0].json.extractedDueDate = csvRow.DueDate; // Ensure YYYY-MM-DD\n  items[0].json.extractedDebtorName = csvRow.DebtorName;\n  items[0].json.extractedIssuerName = csvRow.IssuerName;\n  items[0].json.extractedIssuerBankAccount = csvRow.IssuerBankAccount;\n  items[0].json.extractedIssuerBankName = csvRow.IssuerBankName;\n}\n\nitems[0].json.jsonData = JSON.stringify(items[0].json);\nreturn items;"
      },
      "name": "Function - Map CSV Data",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        200,
        200
      ],
      "id": "b6473ce4-f51c-423f-9589-cc3dd78e073b"
    },
    {
      "parameters": {
        "filePath": "={{ $json.absoluteFilePath }}"
      },
      "name": "Read Image File",
      "type": "n8n-nodes-base.readBinaryFile",
      "typeVersion": 1,
      "position": [
        0,
        400
      ],
      "id": "87a5f526-26e2-497a-a62b-b6019168326a"
    },
    {
      "parameters": {
        "command": "=tesseract \"{{ $json.absoluteFilePath }}\" stdout -l eng --psm 6"
      },
      "name": "Execute Tesseract OCR",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        200,
        400
      ],
      "id": "f48f930e-4d27-4426-9fa7-d7aee22ae1db"
    },
    {
      "parameters": {
        "functionCode": "const text = $json.stdout;\nconst extractedData = {};\n\n// --- Your custom OCR text parsing logic here ---\n// This is highly dependent on invoice layout and OCR quality.\nlet match = text.match(/Invoice No[:\\s]+([A-Za-z0-9-]+)/i);\nif (match && match[1]) extractedData.extractedInvoiceNumber = match[1].trim();\n\n// ... more robust regex for other fields ...\n\nextractedData.jsonData = JSON.stringify(extractedData);\nreturn [{ json: extractedData }];"
      },
      "name": "Function - Extract OCR Data",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        400,
        400
      ],
      "id": "18c92ddc-f938-4edb-9d3b-fd852489b386"
    },
    {
      "parameters": {},
      "name": "Merge Success",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        600,
        200
      ],
      "id": "7dcdcfcf-613f-4f9f-8d28-fc4797dea255"
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "invoiceId",
              "value": "={{ $node[\"Set - Prepare Initial Data\"].json.invoiceId }}"
            },
            {
              "name": "jsonDataString",
              "value": "={{ $json.json.jsonData || '{}' }}"
            },
            {
              "name": "extractedInvoiceNumber",
              "value": "={{ $json.json.extractedInvoiceNumber }}"
            },
            {
              "name": "extractedCurrency",
              "value": "={{ $json.json.extractedCurrency }}"
            },
            {
              "name": "extractedDueDate",
              "value": "={{ $json.json.extractedDueDate }}"
            },
            {
              "name": "extractedDebtorName",
              "value": "={{ $json.json.extractedDebtorName }}"
            },
            {
              "name": "extractedIssuerName",
              "value": "={{ $json.json.extractedIssuerName }}"
            },
            {
              "name": "extractedIssuerBankAccount",
              "value": "={{ $json.json.extractedIssuerBankAccount }}"
            },
            {
              "name": "extractedIssuerBankName",
              "value": "={{ $json.json.extractedIssuerBankName }}"
            },
            {
              "name": "newStatus",
              "value": "pending_admin_review"
            }
          ],
          "number": [
            {
              "name": "extractedAmount",
              "value": "={{ $json.json.extractedAmount }}"
            }
          ],
          "boolean": []
        },
        "options": {}
      },
      "name": "Set - API Payload (Success)",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        800,
        200
      ],
      "id": "026c7253-72e7-44eb-b374-4f8174fcbe58"
    },
    {
      "parameters": {
        "url": "={{ $env.GO_API_BASE_URL }}/internal/invoices/{{ $json.invoiceId }}/processed-data",
        "authentication": "headerAuth",
        "options": {}
      },
      "name": "HTTP - Update Go API (Success)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        1000,
        200
      ],
      "id": "a7351897-e7c8-475d-9db8-9b1d38cf6646"
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "invoiceId",
              "value": "={{ $node[\"Set - Prepare Initial Data\"].json.invoiceId }}"
            },
            {
              "name": "errorMessage",
              "value": "={{ $error.message || 'Unknown processing error' }}"
            },
            {
              "name": "errorDetails",
              "value": "={{ JSON.stringify($error) }}"
            }
          ]
        },
        "options": {}
      },
      "name": "Set - Error Details",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        200,
        600
      ],
      "id": "4324f22a-403b-4263-a424-bb4db0de0c4c"
    },
    {
      "parameters": {
        "url": "={{ $env.GO_API_BASE_URL }}/internal/invoices/{{ $json.invoiceId }}/processed-data",
        "options": {}
      },
      "name": "HTTP - Update Go API (Error)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        400,
        600
      ],
      "id": "57acd60a-aabf-44f8-a121-da5f6c1a2ba5"
    },
    {
      "parameters": {
        "resource": "spreadsheet",
        "title": "invoice",
        "sheetsUi": {
          "sheetValues": [
            {
              "title": "1"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        0,
        200
      ],
      "id": "865c1e3f-5252-4523-b1cf-e84facf27290",
      "name": "Google Sheets",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "tzaAe8wQROYWROYI",
          "name": "Google Sheets account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "RabbitMQ Trigger": {
      "main": [
        [
          {
            "node": "Set - Prepare Initial Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set - Prepare Initial Data": {
      "main": [
        [
          {
            "node": "Switch - File Type",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch - File Type": {
      "main": [
        [
          {
            "node": "Read PDF File",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Google Sheets",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Read Image File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read PDF File": {
      "main": [
        [
          {
            "node": "Execute pdftotext",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute pdftotext": {
      "main": [
        [
          {
            "node": "Function - Extract PDF Data",
            "type": "main",
            "index": 0
          },
          {
            "node": "Set - Error Details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function - Extract PDF Data": {
      "main": [
        [
          {
            "node": "Merge Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function - Map CSV Data": {
      "main": [
        [
          {
            "node": "Merge Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read Image File": {
      "main": [
        [
          {
            "node": "Execute Tesseract OCR",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Tesseract OCR": {
      "main": [
        [
          {
            "node": "Function - Extract OCR Data",
            "type": "main",
            "index": 0
          },
          {
            "node": "Set - Error Details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function - Extract OCR Data": {
      "main": [
        [
          {
            "node": "Merge Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Success": {
      "main": [
        [
          {
            "node": "Set - API Payload (Success)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set - API Payload (Success)": {
      "main": [
        [
          {
            "node": "HTTP - Update Go API (Success)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP - Update Go API (Success)": {
      "main": [
        [
          {
            "node": "Set - Error Details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set - Error Details": {
      "main": [
        [
          {
            "node": "HTTP - Update Go API (Error)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Sheets": {
      "main": [
        [
          {
            "node": "Function - Map CSV Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "6a66e05f-37c8-4657-8693-93540a379442",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "b2f4a68af9a00c3b1e8de80e090a4b1d068c3ac5e3dfbc626a0a9fbdc3dbf927"
  },
  "id": "Xm4pcA1VJPaKsWmt",
  "tags": []
}