version: '3.8' # Added version for better compatibility and feature access

services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: invoice_api
    ports:
      - "${APP_PORT:-3000}:${APP_PORT:-3000}"
    volumes:
      - ./go.mod:/app/go.mod
      - ./go.sum:/app/go.sum
      - ./main.go:/app/main.go
      - ./internal:/app/internal
      - ./config:/app/config
    depends_on:
      - postgres
      - redis
      - rabbitmq
    env_file:
      - .env
    environment:
      - APP_ENV=${APP_ENV:-development}
    restart: unless-stopped

  postgres:
    image: postgres:15-alpine
    container_name: invoice_postgres
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-yourpassword}
      POSTGRES_DB: ${DB_NAME:-invoice_db} # Main application database
      # SonarQube will use its own database, which it can create if the user has rights
      # or you might need to create it manually: CREATE DATABASE sonarqube;
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: invoice_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    # command: redis-server --requirepass ${REDIS_PASSWORD} # If you set a password

  n8n:
    image: n8nio/n8n
    container_name: n8n_invoice_processor
    restart: unless-stopped
    ports:
      - "5678:5678"
    environment:
      - N8N_HOST=${N8N_HOST:-localhost}
      - N8N_PORT=5678
      - GENERIC_TIMEZONE=${TZ:-Africa/Accra} # Adjust to your timezone
      - WEBHOOK_URL=http://${N8N_HOST:-localhost}:5678/
      - GO_API_BASE_URL=http://api:3000/api/v1 # 'api' is the service name of your Go backend
      - GO_API_INTERNAL_KEY=${INTERNAL_API_KEY}
    volumes:
      - n8n_data:/home/node/.n8n
      - ./uploads:/mnt/invoice_uploads # Corrected: Removed extra hyphen
    depends_on:
      - rabbitmq
      - api

  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: invoice_rabbitmq
    ports:
      - "5672:5672"   # For AMQP
      - "15672:15672" # For Management UI
    environment:
      RABBITMQ_DEFAULT_USER: guest # For dev only, change in production
      RABBITMQ_DEFAULT_PASS: guest # For dev only, change in production
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq/
    restart: unless-stopped

  sonarqube:
    image: sonarqube:lts-community # Using LTS Community Edition
    container_name: invoice_sonarqube
    ports:
      - "9000:9000" # SonarQube UI
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://postgres:5432/${SONARQUBE_DB_NAME:-sonarqube_db}
      SONAR_JDBC_USERNAME: ${DB_USER:-postgres} # Using the same user as the main app
      SONAR_JDBC_PASSWORD: ${DB_PASSWORD:-yourpassword} # Using the same password
      # SONAR_ES_BOOTSTRAP_CHECKS_DISABLE: "true" # Uncomment if you face Elasticsearch bootstrap checks issues on dev
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_logs:/opt/sonarqube/logs
      - sonarqube_extensions:/opt/sonarqube/extensions
    depends_on:
      - postgres # SonarQube needs the database to be up and running
    restart: unless-stopped
    # SonarQube can be resource-intensive. You might need to adjust Docker's resource limits.
    # For production, consider increasing memory limits for the JVM:
    # SONAR_WEB_JAVAOPTS: "-Xmx1G -Xms256m -XX:+HeapDumpOnOutOfMemoryError"
    # SONAR_CE_JAVAOPTS: "-Xmx1G -Xms256m -XX:+HeapDumpOnOutOfMemoryError"
    # SONAR_SEARCH_JAVAOPTS: "-Xmx1G -Xms1G -XX:+HeapDumpOnOutOfMemoryError"


volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  n8n_data:
  sonarqube_data: # Volume for SonarQube data
  sonarqube_logs: # Volume for SonarQube logs
  sonarqube_extensions: # Volume for SonarQube extensions/plugins
